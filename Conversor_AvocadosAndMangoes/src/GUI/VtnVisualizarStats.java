/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Clases.Product;
import Clases.Table;
import Conexion.Conexion;
import static Conexion.Conexion.escribirArchivoHOrdersXFecha;
import java.awt.Component;
import java.awt.PopupMenu;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.Vector;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.PieDataset;
import org.jfree.data.general.SeriesException;
import org.jfree.data.time.Minute;
import org.jfree.data.time.Second;
import org.jfree.data.time.TimeSeries;
import org.jfree.data.time.TimeSeriesCollection;
import org.jfree.data.xy.XYDataset;

/**
 *
 * @author johnm
 */
public class VtnVisualizarStats extends javax.swing.JFrame {
    
    private VtnMain main;
    private VtnStats stats;
    private String productoBusqueda;
    private DefaultTableModel tablaModelo;
    
    public VtnVisualizarStats() {
        initComponents();
        this.setLocation(100, 30);
        this.setResizable(false);
        
        //Carga de las ordenes de base de datos a la tabla de visualizacion
        CargarDatosTabla();
        System.out.println("tamanio: "+tablaProducts.getRowCount());
        crearComboboxCategoriaPpal();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProducts = new javax.swing.JTable();
        btnRegresar = new javax.swing.JToggleButton();
        txtSaleValue = new javax.swing.JTextField();
        txtExpense = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        cmpName = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        cmpPurchaseValue = new javax.swing.JTextField();
        cmpId = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        cmpSaleValue = new javax.swing.JTextField();
        spinQuantity = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        btnVerOrden = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnLimpiarCampos = new javax.swing.JButton();
        btnLimpiarCampos1 = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        btnSelectAll = new javax.swing.JButton();
        btnUnselectAll = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        txtPurchaseValue = new javax.swing.JTextField();
        cmpFromDate = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        cmpToDate = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        ComboBoxGraphics = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        boxValor1 = new javax.swing.JComboBox<>();
        boxValor2 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtSearchProduct = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        boxValor11 = new javax.swing.JComboBox<>();
        boxCategory = new javax.swing.JComboBox<>();
        boxSubCategory = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        btnFiltroCategoria = new javax.swing.JButton();
        checkAlineacion = new javax.swing.JCheckBox();
        boxGroup = new javax.swing.JComboBox<>();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Bookman Old Style", 1, 30)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("STATS");

        tablaProducts.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Product", "Quantity", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaProductsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaProducts);

        btnRegresar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/flecha.png"))); // NOI18N
        btnRegresar.setBorder(null);
        btnRegresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegresarActionPerformed(evt);
            }
        });

        txtSaleValue.setEditable(false);
        txtSaleValue.setEnabled(false);

        txtExpense.setText("0.0");
        txtExpense.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtExpenseActionPerformed(evt);
            }
        });

        btnCalculate.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel12.setText("Total Sale value");

        jLabel13.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Expense");

        jLabel14.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel14.setText("TOTAL");

        lblTotal.setFont(new java.awt.Font("Bookman Old Style", 1, 14)); // NOI18N
        lblTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotal.setText("0.0");

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jLabel28.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel28.setText("Name");

        cmpName.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpNameKeyPressed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Quantity");

        jLabel30.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Purchase value");

        cmpPurchaseValue.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpPurchaseValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpPurchaseValueActionPerformed(evt);
            }
        });
        cmpPurchaseValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpPurchaseValueKeyPressed(evt);
            }
        });

        cmpId.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpId.setEnabled(false);
        cmpId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpIdActionPerformed(evt);
            }
        });
        cmpId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpIdKeyPressed(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Id");

        jLabel36.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("Sale value");

        cmpSaleValue.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpSaleValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpSaleValueActionPerformed(evt);
            }
        });
        cmpSaleValue.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpSaleValueKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmpName)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel34)
                            .addComponent(cmpId, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(cmpPurchaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel36)
                            .addComponent(cmpSaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(0, 1, Short.MAX_VALUE)
                                .addComponent(jLabel29))
                            .addComponent(spinQuantity))
                        .addGap(28, 28, 28)))
                .addGap(17, 17, 17))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmpName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmpId))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(jLabel30)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmpSaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmpPurchaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spinQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        btnVerOrden.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/lapiz_icon.png"))); // NOI18N
        btnVerOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerOrdenActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Update");

        jLabel15.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Clean");

        btnLimpiarCampos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/limpiar_icon.png"))); // NOI18N
        btnLimpiarCampos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCamposActionPerformed(evt);
            }
        });

        btnLimpiarCampos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Recursos/filtro_icon.png"))); // NOI18N
        btnLimpiarCampos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarCampos1ActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Filter");

        jLabel18.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Select all");

        jLabel19.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Unselect all");

        btnSelectAll.setText("O");
        btnSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectAllActionPerformed(evt);
            }
        });

        btnUnselectAll.setText("X");
        btnUnselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnselectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnLimpiarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnLimpiarCampos1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(btnUnselectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel19))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel15)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnVerOrden, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiarCampos, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLimpiarCampos1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUnselectAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel16.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel16.setText("Total Purcharse value");

        txtPurchaseValue.setEditable(false);
        txtPurchaseValue.setEnabled(false);

        cmpFromDate.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpFromDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpFromDateActionPerformed(evt);
            }
        });
        cmpFromDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpFromDateKeyPressed(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel31.setText("From date (dd/mm/yyyy)");

        jLabel32.setFont(new java.awt.Font("Bookman Old Style", 1, 12)); // NOI18N
        jLabel32.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel32.setText("To date (dd/mm/yyyy)");

        cmpToDate.setFont(new java.awt.Font("Bookman Old Style", 0, 14)); // NOI18N
        cmpToDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmpToDateActionPerformed(evt);
            }
        });
        cmpToDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmpToDateKeyPressed(evt);
            }
        });

        jButton1.setText("Export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Draw chart");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        ComboBoxGraphics.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bar", "Circular", "Line" }));

        jLabel2.setText("Graphics");

        boxValor1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Quantity", "SaleValue", "CostPerItem", "SaleTotal", "PurchaseTotal", "Profitability", "Profits" }));

        boxValor2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Date", "Category" }));

        jLabel3.setText("Value 1");

        jLabel4.setText("Value 2");

        txtSearchProduct.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchProductKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchProductKeyTyped(evt);
            }
        });

        jLabel6.setText("Search product");

        boxValor11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----", "Quantity", "SaleValue", "CostPerItem", "SaleTotal", "PurchaseTotal", "Profitability", "Profits" }));

        boxCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----" }));
        boxCategory.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxCategoryItemStateChanged(evt);
            }
        });

        boxSubCategory.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----" }));

        jLabel7.setText("Category");

        jLabel8.setText("Subcategory");

        btnFiltroCategoria.setText("Filter");
        btnFiltroCategoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltroCategoriaActionPerformed(evt);
            }
        });

        checkAlineacion.setText("Horizontal alignment");

        boxGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Weeks", "Months", "Years" }));

        jLabel9.setText("Group by");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(464, 464, 464)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(boxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel7))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel8)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(boxSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(34, 34, 34)
                                                .addComponent(btnFiltroCategoria, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(ComboBoxGraphics, 0, 153, Short.MAX_VALUE)
                                                .addComponent(jLabel2)
                                                .addComponent(checkAlineacion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addComponent(jLabel9))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(boxValor1, 0, 129, Short.MAX_VALUE)
                                            .addComponent(jLabel3)
                                            .addComponent(boxValor11, 0, 129, Short.MAX_VALUE)
                                            .addComponent(boxGroup, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(boxValor2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(cmpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(cmpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel12)
                                    .addComponent(txtSaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel16)
                                    .addComponent(txtPurchaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(34, 34, 34)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel13)
                                    .addComponent(txtExpense, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(44, 44, 44)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(38, 38, 38)
                                        .addComponent(btnCalculate))
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(54, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 855, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnRegresar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ComboBoxGraphics, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxValor1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxValor2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(boxValor11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkAlineacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(jLabel16)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSaleValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPurchaseValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtExpense, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblTotal)
                            .addComponent(btnCalculate, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(boxSubCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFiltroCategoria)
                    .addComponent(boxGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel31)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cmpToDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmpFromDate, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)))
                .addContainerGap(22, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(465, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRegresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegresarActionPerformed
        // TODO add your handling code here:
        stats = new VtnStats();
        irA(stats);
    }//GEN-LAST:event_btnRegresarActionPerformed

    private void tablaProductsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaProductsMouseClicked
        //Evento al presionar doble click sobre registro de la tabla
        SeleccionarDatosTabla();
    }//GEN-LAST:event_tablaProductsMouseClicked

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
       calcularTotal();
    }//GEN-LAST:event_btnCalculateActionPerformed

    private void cmpNameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpNameKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpNameKeyPressed

    private void cmpPurchaseValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpPurchaseValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpPurchaseValueActionPerformed

    private void cmpPurchaseValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpPurchaseValueKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpPurchaseValueKeyPressed

    private void cmpIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpIdActionPerformed

    private void cmpIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpIdKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpIdKeyPressed

    private void cmpSaleValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpSaleValueActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpSaleValueActionPerformed

    private void cmpSaleValueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpSaleValueKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpSaleValueKeyPressed

    private void btnVerOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerOrdenActionPerformed
        //Modifica el registro en base de datos
        ModificarDatosTabla();
        CargarDatosTabla();
    }//GEN-LAST:event_btnVerOrdenActionPerformed

    private void btnLimpiarCamposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCamposActionPerformed
        limpiarDatos();
    }//GEN-LAST:event_btnLimpiarCamposActionPerformed

    private void txtExpenseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtExpenseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtExpenseActionPerformed

    private void cmpFromDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpFromDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpFromDateActionPerformed

    private void cmpFromDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpFromDateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpFromDateKeyPressed

    private void cmpToDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmpToDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpToDateActionPerformed

    private void cmpToDateKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmpToDateKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmpToDateKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String fechaDesde = cmpFromDate.getText();
        String fechaHasta = cmpToDate.getText();
        String rutaArchivo = "";
        
        String dia;
        String mes;
        String annio;
        Calendar c1 = Calendar.getInstance();
        dia = Integer.toString(c1.get(Calendar.DATE));
        mes = Integer.toString(c1.get(Calendar.MONTH) + 1);
        annio = Integer.toString(c1.get(Calendar.YEAR));
        
        rutaArchivo = JOptionPane.showInputDialog(this, "Export path: ");
        
        rutaArchivo = rutaArchivo + "\\statsExp"+dia+mes+annio+".csv";
        
        Conexion.escribirArchivoEstadisticaXFecha(fechaDesde, fechaHasta, rutaArchivo, tablaProducts);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnLimpiarCampos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarCampos1ActionPerformed
        // TODO add your handling code here:
        CargarDatosTabla();
    }//GEN-LAST:event_btnLimpiarCampos1ActionPerformed

    private Date obtenerFechaDeCadena(String date){
        
       if(boxGroup.getSelectedItem().equals("Weeks"))
       {
            String fechaSplit[] = date.split("/");
       
            Date fecha = new Date(Integer.parseInt(fechaSplit[2]), Integer.parseInt(fechaSplit[1]), Integer.parseInt(fechaSplit[0]));
            return fecha;
       }
       else if(boxGroup.getSelectedItem().equals("Months"))
       {
            String fechaSplit[] = date.split("-");
            int mes = 0;
                   
            if(fechaSplit[0].contains("01"))
                mes = 1;
            else if(fechaSplit[0].contains("02"))
                mes = 2;
            else if(fechaSplit[0].contains("03"))
                mes = 3;
            else if(fechaSplit[0].contains("04"))
                mes = 4;
            else if(fechaSplit[0].contains("05"))
                mes = 5;
            else if(fechaSplit[0].contains("06"))
                mes = 6;
            else if(fechaSplit[0].contains("07"))
                mes = 7;
            else if(fechaSplit[0].contains("08"))
                mes = 8;
            else if(fechaSplit[0].contains("09"))
                mes = 9;
            else if(fechaSplit[0].contains("11"))
                mes = 10;
            else if(fechaSplit[0].contains("11"))
                mes = 11;
            else if(fechaSplit[0].contains("12"))
                mes = 12;
            
       
            Date fecha = new Date(Integer.parseInt(fechaSplit[1]), mes, 0);
            return fecha;
       }
       else if(boxGroup.getSelectedItem().equals("Years"))
       {
       
            Date fecha = new Date(Integer.parseInt(date), 1, 1);
            return fecha;
       }
       return null;
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            DefaultCategoryDataset dtsc = new DefaultCategoryDataset();
            JFrame graficas = new JFrame();
            JFreeChart ch;
            ChartPanel cp = null;
            Table table;
            ArrayList<Table> listaDtsc = new ArrayList<>();
            String product;
            int quantity;
            double saleValue;
            double purchaseValue;
            double saleTotal;
            double purchaseTotal;
            double profits;
            double valorPrecioCosto;
            String date;
            String categoriaProducto;
            Double valor1 = 0.0;
            ArrayList<Table> listaFiltrada = new ArrayList<>();
            
            
            listaFiltrada = filtrarDatos();
            
            if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Date"))
            {
                Collections.sort(listaFiltrada, new Comparator<Table>() 
                {@Override
                public int compare(Table o1, Table o2) { 
                    if ((o1.getDate()== null || o2.getDate() == null) || (o1.getDate().equalsIgnoreCase("") || o2.getDate().equalsIgnoreCase("")))
                        return 0; 
                
                    Date dateo1 = obtenerFechaDeCadena(o1.getDate());
                    Date dateo2 = obtenerFechaDeCadena(o2.getDate());

                    return dateo1.compareTo(dateo2); 
                } });
            }
            
            if(ComboBoxGraphics.getSelectedItem().toString().equalsIgnoreCase("Bar"))
            {
                 for(int j = 0; j < listaFiltrada.size(); j++){
                     
                     if(listaFiltrada.get(j).getProduct().equalsIgnoreCase("Tip"))
                         continue;
                     
                     product = listaFiltrada.get(j).getProduct();
                     quantity = listaFiltrada.get(j).getQuantity();
                     saleValue = listaFiltrada.get(j).getSaleValue();
                     purchaseValue = listaFiltrada.get(j).getPurchaseValue();
                     saleTotal = listaFiltrada.get(j).getSaleTotal();
                     purchaseTotal = listaFiltrada.get(j).getPurchaseTotal();
                     valorPrecioCosto = listaFiltrada.get(j).getValorPrecioCosto();
                     date = listaFiltrada.get(j).getDate();
                     profits = listaFiltrada.get(j).getProfits();
                     categoriaProducto = ObtenerCategoriaPpalDeProducto(product);
                     boolean primerDato = true;
                     
                     System.out.println("Producto: "+ product);
                     System.out.println("Categoria: "+categoriaProducto);

                    for (int i = 0; i < listaDtsc.size(); i++) {
                        if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Date"))
                        {
                            if(listaDtsc.get(i).getDate().equalsIgnoreCase(date))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                        }
                        else if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Category"))
                        {
                            if(listaDtsc.get(i).getDate().equalsIgnoreCase(date))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                                
                        }
                    } 

                    if(primerDato){
                        
                        table = new Table(product, quantity, saleValue, purchaseValue, saleTotal, purchaseTotal, profits, valorPrecioCosto, date);
                        listaDtsc.add(table);
                    }
                                    
                 }
                
                
                for(int x = 0; x < listaDtsc.size(); x++){
                    String etiqueta = obtenerEtiqueta(boxValor2.getSelectedItem().toString(), listaDtsc.get(x));
                    double valor = obtenerValor(boxValor1.getSelectedItem().toString(), listaDtsc.get(x));
                    if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Product"))
                        dtsc.setValue(valor, etiqueta, listaDtsc.get(x).getProduct());
                    else
                        dtsc.setValue(valor, etiqueta, listaDtsc.get(x).getDate());
                }
                
                PlotOrientation orientacion;
                if(checkAlineacion.isSelected())
                    orientacion = PlotOrientation.HORIZONTAL;
                else
                    orientacion = PlotOrientation.VERTICAL;
                ch = ChartFactory.createBarChart3D("Bar chart ("+boxGroup.getSelectedItem().toString()+")", boxValor2.getSelectedItem().toString(), boxValor1.getSelectedItem().toString(), dtsc,orientacion, true, true, false);
                cp = new ChartPanel(ch);
            }
            else if(ComboBoxGraphics.getSelectedItem().toString().equalsIgnoreCase("Circular"))
            {
                DefaultPieDataset dataset = new DefaultPieDataset( );
                
                for(int j = 0; j < listaFiltrada.size(); j++){
                     
                     product = listaFiltrada.get(j).getProduct();
                     quantity = listaFiltrada.get(j).getQuantity();
                     saleValue = listaFiltrada.get(j).getSaleValue();
                     purchaseValue = listaFiltrada.get(j).getPurchaseValue();
                     saleTotal = listaFiltrada.get(j).getSaleTotal();
                     purchaseTotal = listaFiltrada.get(j).getPurchaseTotal();
                     valorPrecioCosto = listaFiltrada.get(j).getValorPrecioCosto();
                     date = listaFiltrada.get(j).getDate();
                     profits = listaFiltrada.get(j).getProfits();
                     boolean primerDato = true;
                     
                      for (int i = 0; i < listaDtsc.size(); i++) {
                        if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Date"))
                        {
                            if(listaDtsc.get(i).getDate().equalsIgnoreCase(date))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                        }
                        else
                        {
                            if(listaDtsc.get(i).getProduct().equalsIgnoreCase(product))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                        }
                    } 

                    if(primerDato){
                        table = new Table(product, quantity, saleValue, purchaseValue, saleTotal, purchaseTotal, profits, valorPrecioCosto, date);
                        listaDtsc.add(table);
                    }
                                    
                 }
                
                for(int x = 0; x < listaDtsc.size(); x++){
                    String etiqueta = obtenerEtiqueta(boxValor2.getSelectedItem().toString(), listaDtsc.get(x));
                    double valor = obtenerValor(boxValor1.getSelectedItem().toString(), listaDtsc.get(x));
                    dataset.setValue(etiqueta, valor);
                }
                
                ch = ChartFactory.createPieChart("Pie chart("+boxGroup.getSelectedItem().toString()+")", dataset);
                cp = new ChartPanel(ch);
            }
            else if(ComboBoxGraphics.getSelectedItem().toString().equalsIgnoreCase("Line"))
            {
                
                for(int j = 0; j < listaFiltrada.size(); j++){
                     
                     product = listaFiltrada.get(j).getProduct();
                     quantity = listaFiltrada.get(j).getQuantity();
                     saleValue = listaFiltrada.get(j).getSaleValue();
                     purchaseValue = listaFiltrada.get(j).getPurchaseValue();
                     saleTotal = listaFiltrada.get(j).getSaleTotal();
                     purchaseTotal = listaFiltrada.get(j).getPurchaseTotal();
                     valorPrecioCosto = listaFiltrada.get(j).getValorPrecioCosto();
                     date = listaFiltrada.get(j).getDate();
                     profits = listaFiltrada.get(j).getProfits();
                     boolean primerDato = true;
                     
                      for (int i = 0; i < listaDtsc.size(); i++) {
                        if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Date"))
                        {
                            if(listaDtsc.get(i).getDate().equalsIgnoreCase(date))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                        }
                        else
                        {
                            if(listaDtsc.get(i).getProduct().equalsIgnoreCase(product))
                            {
                                listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                                listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                                listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                                listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                                listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                                listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                                listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                                primerDato = false;
                            }
                        }
                    } 

                    if(primerDato){
                        table = new Table(product, quantity, saleValue, purchaseValue, saleTotal, purchaseTotal, profits, valorPrecioCosto, date);
                        listaDtsc.add(table);
                    }
                                    
                 }
                
                for(int x = 0; x < listaDtsc.size(); x++){
                    //(Dato valor, etiqueta dato, año(dato de referencia))
                    String etiqueta = obtenerEtiqueta(boxValor2.getSelectedItem().toString(), listaDtsc.get(x));
                    double valor = obtenerValor(boxValor1.getSelectedItem().toString(), listaDtsc.get(x));
                    System.out.println("Valor:"+ valor);
                    dtsc.addValue(valor, boxValor1.getSelectedItem().toString(), etiqueta);
                    
                    if(!boxValor11.getSelectedItem().toString().equalsIgnoreCase("----"))
                    {
                        double valor2 = obtenerValor(boxValor11.getSelectedItem().toString(), listaDtsc.get(x));
                        dtsc.addValue(valor2, boxValor11.getSelectedItem().toString(), etiqueta);
                    }
                }
                
                PlotOrientation orientacion;
                if(checkAlineacion.isSelected())
                    orientacion = PlotOrientation.HORIZONTAL;
                else
                    orientacion = PlotOrientation.VERTICAL;
                ch = ChartFactory.createLineChart("Line chart ("+boxGroup.getSelectedItem().toString()+")", boxValor2.getSelectedItem().toString(),boxValor1.getSelectedItem().toString(),dtsc,orientacion, true,true,false);
                cp = new ChartPanel(ch);
            }
            graficas.setSize(1200, 700);
            graficas.add(cp);
            cp.setBounds(500,40,500,400);
            graficas.setVisible(true);
            
    }//GEN-LAST:event_jButton2ActionPerformed

    private double obtenerValor(String campo, Table tabla){
        double valor = 0.0;
        
        
        switch(campo)
        {
           case "Product":
              break; 

           case "Quantity" :
               valor = tabla.getQuantity();
              break;
             
           case "SaleValue" :
               valor = tabla.getSaleValue();
              break; 
              
           case "CostPerItem" :
               valor = tabla.getPurchaseValue();
              break; 
           
           case "SaleTotal" :
               valor = tabla.getSaleTotal();
              break; 
              
           case "PurchaseTotal" :
               valor = tabla.getPurchaseTotal();
              break; 
              
           case "Profitability":
               valor = tabla.getValorPrecioCosto();
              break;
              
           case "Profits":
               valor = tabla.getProfits();
              break;
           
           case "Date" :
              break; 

           
           default : 
        }
        
        return valor;
    }
    
    private String obtenerEtiqueta(String campo, Table tabla){
        String valor = "";
        
        
        switch(campo)
        {
           case "Product":
               valor = tabla.getProduct();
              break; 

           case "Date" :
               valor = tabla.getDate();
              break; 
              
            case "Category" :
               valor = tabla.getDate();
              break; 

           
           default : 
        }
        
        return valor;
    }
    
    private XYDataset createDataset( ) {
      final TimeSeries series = new TimeSeries( "Random Data" );         
      Minute current = new Minute( );         
      double value = 100.0;         
      
      for (int i = 0; i < 4000; i++) {
         
         try {
            value = value + Math.random( ) - 0.5;                 
            series.add(current, new Double( value ) );                 
            current = ( Minute ) current.next( ); 
         } catch ( SeriesException e ) {
            System.err.println("Error adding to series");
         }
      }

      return new TimeSeriesCollection(series);
   }    
    private void btnSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectAllActionPerformed
        // TODO add your handling code here:
          for(int i = 0; i < tablaProducts.getRowCount(); i++){
                tablaProducts.setValueAt(true,i,9);
            }
        
    }//GEN-LAST:event_btnSelectAllActionPerformed

    private void btnUnselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnselectAllActionPerformed
        // TODO add your handling code here:
         for(int i = 0; i < tablaProducts.getRowCount(); i++){
                tablaProducts.setValueAt(false,i,9);
            }
    }//GEN-LAST:event_btnUnselectAllActionPerformed

    private void txtSearchProductKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchProductKeyTyped
        // TODO add your handling code here:
        /*productoBusqueda = txtSearchProduct.getText();
        for (int i = 0; i < tablaProducts.getRowCount(); i++) {
            if(!tablaProducts.getValueAt(i, 0).toString().contains(productoBusqueda)){
               tablaProducts.remove(i);
            }
        }*/
        
        
    }//GEN-LAST:event_txtSearchProductKeyTyped

    private void txtSearchProductKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchProductKeyReleased
        // TODO add your handling code here:
        productoBusqueda = txtSearchProduct.getText();
        double valorTotal = 0;
        double valorTotalP = 0;
        // Instanciamos el TableRowSorter y lo añadimos al JTable
        TableRowSorter<TableModel> elQueOrdena = new TableRowSorter<>(tablaModelo);
        tablaProducts.setRowSorter(elQueOrdena);
        
        System.out.println("Busqueda: "+productoBusqueda);
        elQueOrdena.setRowFilter(RowFilter.regexFilter(productoBusqueda, 0));
        System.out.println("Tamanio:"+tablaProducts.getRowCount());
        
        for(int j = 0; j < tablaProducts.getRowCount(); j++){
            
            valorTotal += Double.parseDouble(tablaProducts.getValueAt(j, 2).toString()) * Integer.parseInt(tablaProducts.getValueAt(j, 1).toString());
            valorTotalP += Double.parseDouble(tablaProducts.getValueAt(j, 3).toString()) * Integer.parseInt(tablaProducts.getValueAt(j, 1).toString());
        }
        
        //Se redondea el valor de los totales a 2 decimales
        BigDecimal bd = new BigDecimal(valorTotal).setScale(2, RoundingMode.HALF_UP);
        double val2 = bd.doubleValue();
        String totalStr = ""+val2;
        
        BigDecimal bd2 = new BigDecimal(valorTotalP).setScale(2, RoundingMode.HALF_UP);
        double val1 = bd2.doubleValue();
        String totalStrP = ""+val1;
        
        double totalCal = val2 - val1;
        BigDecimal total = new BigDecimal(totalCal).setScale(2, RoundingMode.HALF_UP);
        double total1 = total.doubleValue();
        String totalSP = ""+total1;
      
        lblTotal.setText(totalSP);
                
        txtSaleValue.setText(totalStr);
        txtPurchaseValue.setText(totalStrP);
        
    }//GEN-LAST:event_txtSearchProductKeyReleased

    private void boxCategoryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxCategoryItemStateChanged
        // TODO add your handling code here:
        String categoria = boxCategory.getSelectedItem().toString();
        crearComboboxCategoriaSub(categoria);
    }//GEN-LAST:event_boxCategoryItemStateChanged

    private void btnFiltroCategoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltroCategoriaActionPerformed
        // TODO add your handling code here:
        filtrarTablaCategoria();
    }//GEN-LAST:event_btnFiltroCategoriaActionPerformed
    
    public void irA(JFrame ventana){
        this.dispose();
        ventana.setVisible(true);
    }
    
    public void CargarDatosTabla(){
        
         tablaModelo = new DefaultTableModel()
        {
         @Override
         public Class<?> getColumnClass(int column)
        {
         switch(column)
         {
            case 9:
                return Boolean.class;

          default:
            return String.class;
        }
      }
    };
        Statement st;
        ResultSet rs;
        Conexion cnx = new Conexion();
        Connection con;
        String sql = "";
        String where = "";
        double valorTotal = 0.0;
        double valorTotalP = 0.0;
        String totalStr;
        String totalStrP;
        
        ArrayList<Product> productos = new ArrayList<>();
        
       // productos = Conexion.llenarTablaProductos();
        try {
            
            int cantCol;
            
            tablaProducts.setModel(tablaModelo);

            //Asigna rotulos a la tabla
            tablaModelo.addColumn("Product");
            tablaModelo.addColumn("Quantity");
            tablaModelo.addColumn("SaleValue");
            tablaModelo.addColumn("CostPerItem");
            tablaModelo.addColumn("SaleTotal");
            tablaModelo.addColumn("PurchaseTotal");
            tablaModelo.addColumn("Profits");
            tablaModelo.addColumn("%Profitability");
            tablaModelo.addColumn("Date");
            tablaModelo.addColumn("Select");
               
            
            sql = "select * from hproducts " + where;
            
            Object O[]=null;
            int columnas = 0;
            st = (Statement) cnx.con.createStatement();
            rs = st.executeQuery(sql);

            //Where from filter fields

            while (rs.next()) {
                
                if ( !cmpFromDate.getText().isEmpty() && !cmpToDate.getText().isEmpty() ){
                 
                    String fechaDesde = cmpFromDate.getText();
                    String fechaHasta = cmpToDate.getText();
                    String [] vecFechaDesde = fechaDesde.split("/");
                    String [] vecFechaHasta = fechaHasta.split("/");
                    System.out.println("tamanio:" +vecFechaDesde.length);
                    String cadLongFechaDesde = vecFechaDesde[2]+vecFechaDesde[1]+vecFechaDesde[0];
                    String cadLongFechaHasta = vecFechaHasta[2]+vecFechaHasta[1]+vecFechaHasta[0];

                    long   longFechaDesde = Long.parseLong(cadLongFechaDesde);
                    long   longFechaHasta = Long.parseLong(cadLongFechaHasta);
                    
                    String fecha = rs.getString("uploadDate");
                    String [] vecFecha = fecha.split("/");
                    String cadLongFecha = vecFecha[2]+vecFecha[1]+vecFecha[0];
                    long   longFecha = Long.parseLong(cadLongFecha);

                    if(longFecha >= longFechaDesde && longFecha <= longFechaHasta)
                    {
                        double totalPurchase = rs.getDouble("purchaseValue")*rs.getInt("quantity");
                        BigDecimal totalPurchaseDecimal = new BigDecimal(totalPurchase).setScale(2, RoundingMode.HALF_UP);
                    
                        double totalSale = rs.getDouble("saleValue")*rs.getInt("quantity");
                        BigDecimal totalSaleDecimal = new BigDecimal(totalSale).setScale(2, RoundingMode.HALF_UP);
                        
                        double profits = totalSale - totalPurchase;
                        BigDecimal profitsDecimal = new BigDecimal(profits).setScale(2, RoundingMode.HALF_UP);
                        //double profitabilityDouble = profitabilityDecimal.doubleValue();
                        tablaModelo.addRow(O);
                        tablaModelo.setValueAt(rs.getString("name"), columnas, 0);
                        System.out.println("Produrct: "+rs.getString("name"));
                        tablaModelo.setValueAt(rs.getInt("quantity"), columnas, 1);
                        tablaModelo.setValueAt(rs.getDouble("saleValue"), columnas, 2);
                        tablaModelo.setValueAt(rs.getDouble("purchaseValue"), columnas, 3);
                        tablaModelo.setValueAt(totalSaleDecimal, columnas, 4);
                        tablaModelo.setValueAt(totalPurchaseDecimal, columnas, 5);
                        tablaModelo.setValueAt(profitsDecimal, columnas, 6);
                        if(rs.getDouble("purchaseValue") != 0 && rs.getDouble("saleValue") != 0)
                        {
                            double profitability = (((rs.getDouble("saleValue")) - (rs.getDouble("purchaseValue")))/(rs.getDouble("saleValue")))*100;
                            BigDecimal profitabilityDecimal = new BigDecimal(profitability).setScale(2, RoundingMode.HALF_UP);
                            tablaModelo.setValueAt(profitabilityDecimal, columnas, 7);
                        }
                        else
                            tablaModelo.setValueAt(0.0, columnas, 7);
                        tablaModelo.setValueAt(rs.getString("uploadDate"), columnas, 8);
                        tablaModelo.setValueAt(false,columnas,9);

                        valorTotal = valorTotal + (rs.getDouble("saleValue")*rs.getInt("quantity"));
                        valorTotalP = valorTotalP + (rs.getDouble("purchaseValue")*rs.getInt("quantity"));
                        columnas++;
                    }
                }
                else
                {
                    
                    double totalPurchase = rs.getDouble("purchaseValue")*rs.getInt("quantity");
                    BigDecimal totalPurchaseDecimal = new BigDecimal(totalPurchase).setScale(2, RoundingMode.HALF_UP);
                    
                    double totalSale = rs.getDouble("saleValue")*rs.getInt("quantity");
                    BigDecimal totalSaleDecimal = new BigDecimal(totalSale).setScale(2, RoundingMode.HALF_UP);
                    
                    double profits = totalSale - totalPurchase;
                    BigDecimal profitsDecimal = new BigDecimal(profits).setScale(2, RoundingMode.HALF_UP);
                    
                  //  double profitabilityDouble = profitabilityDecimal.doubleValue();
                    tablaModelo.addRow(O);
                    tablaModelo.setValueAt(rs.getString("name"), columnas, 0);
                    tablaModelo.setValueAt(rs.getInt("quantity"), columnas, 1);
                    tablaModelo.setValueAt(rs.getDouble("saleValue"), columnas, 2);
                    tablaModelo.setValueAt(rs.getDouble("purchaseValue"), columnas, 3);
                    tablaModelo.setValueAt(totalSaleDecimal, columnas, 4);
                    tablaModelo.setValueAt(totalPurchaseDecimal, columnas, 5);
                    tablaModelo.setValueAt(profitsDecimal, columnas, 6);
                    if(rs.getDouble("purchaseValue") != 0 && rs.getDouble("saleValue") != 0)
                    {
                        double profitability = (((rs.getDouble("saleValue")) - (rs.getDouble("purchaseValue")))/(rs.getDouble("saleValue")))*100;
                        BigDecimal profitabilityDecimal = new BigDecimal(profitability).setScale(2, RoundingMode.HALF_UP);
                        tablaModelo.setValueAt(profitabilityDecimal, columnas, 7);
                    }
                    else
                        tablaModelo.setValueAt(0.0, columnas, 7);
                    tablaModelo.setValueAt(rs.getString("uploadDate"), columnas, 8);

                    valorTotal = valorTotal + (rs.getDouble("saleValue")*rs.getInt("quantity"));
                    valorTotalP = valorTotalP + (rs.getDouble("purchaseValue")*rs.getInt("quantity"));
                    columnas++;
                }
                
                System.out.println("Columnas:"+columnas);
            }

            
            cnx.con.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        
        //Se redondea el valor de los totales a 2 decimales
        BigDecimal bd = new BigDecimal(valorTotal).setScale(2, RoundingMode.HALF_UP);
        double val2 = bd.doubleValue();
        totalStr = ""+val2;
        
        BigDecimal bd2 = new BigDecimal(valorTotalP).setScale(2, RoundingMode.HALF_UP);
        double val1 = bd2.doubleValue();
        totalStrP = ""+val1;
        
        double totalCal = val2 - val1;
        BigDecimal total = new BigDecimal(totalCal).setScale(2, RoundingMode.HALF_UP);
        double total1 = total.doubleValue();
        String totalSP = ""+total1;
      
        lblTotal.setText(totalSP);
                
        txtSaleValue.setText(totalStr);
        txtPurchaseValue.setText(totalStrP);
    }
    
    public void calcularTotal(){
        
        double revenue;
        double revenuePurchase;
        double total;
        double expense;
        String totalStr;
        
        revenue = Double.parseDouble(txtSaleValue.getText());
        revenuePurchase = Double.parseDouble(txtPurchaseValue.getText());
        expense = Double.parseDouble(txtExpense.getText());
        
        total = (revenue-revenuePurchase) - expense;
        //Se redondea el valor a 3 decimales
        BigDecimal bd = new BigDecimal(total).setScale(3, RoundingMode.HALF_UP);
        double val2 = bd.doubleValue();
        totalStr = ""+val2;
        
        lblTotal.setText(totalStr);
    }
    
    //Seleccionar datos de tabla para pasarlos a campos de texto del área de registro
    public void SeleccionarDatosTabla(){
        
        Statement prepStat = null;
        ResultSet resSet = null;
        Conexion cnx = new Conexion();
        String sql = "";
        int classIndex = 0;
        
        try {
            
            prepStat = (Statement) cnx.con.createStatement(); 
            
            int fila = tablaProducts.getSelectedRow();
            String name = tablaProducts.getValueAt(fila, 0).toString();
            
            sql = "SELECT id, name, purchaseValue, saleValue, quantity "
                    + "FROM hproducts WHERE name = '"+ name +"'";
            resSet = prepStat.executeQuery(sql);
            
            while ( resSet.next() )
            {
                int id = resSet.getInt("id");
                Double purchaseValue = resSet.getDouble("purchaseValue");
                Double saleValue = resSet.getDouble("saleValue");
                cmpId.setText(resSet.getString("id"));
                cmpName.setText(resSet.getString("name"));
                cmpPurchaseValue.setText(purchaseValue.toString());
                cmpSaleValue.setText(saleValue.toString());
                spinQuantity.setValue(resSet.getInt("quantity"));

            }
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error trying to get the product from database: "+e);
            System.out.println(e.toString());
        }
    }
    
    //Funcion para adicionar registros a base de datos
    public void AdicionarDatosTabla(){
        
        Statement prepStat = null;
        ResultSet resSet = null;
        ResultSetMetaData rsMd = null;
        Conexion cnx = new Conexion();
        String sql = "";
        
        //Variables para adicionar en base de datos
        String name = cmpName.getText();
        String purchaseValue = cmpPurchaseValue.getText();
        String saleValue = cmpSaleValue.getText();
        int quantity = (int)spinQuantity.getValue();
        
        try {
            
            prepStat = (Statement) cnx.con.createStatement(); 
            
            sql = "INSERT INTO products (name, purchaseValue, saleValue, quantity)"
                    + " VALUES ("
                    + "'"+name+"',"
                    + "'"+purchaseValue+"',"
                    + "'"+saleValue+"',"
                    + "'"+quantity+"');";
            
            //System.out.println(sql);
            
            prepStat.executeUpdate(sql);
            
            JOptionPane.showMessageDialog(this, "The product has been added to database", "Base de datos", 1);
            cnx.con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error trying to get the product from database: "+e, "Error", 0);
            System.out.println(e.toString());
        }
    }
    
    //Funcion para modificar en base de datos el registro seleccionado
    public void ModificarDatosTabla(){
        
        Statement prepStat = null;
        Conexion cnx = new Conexion();
        String sql = "";
        Product producto;
        
        //Variables para adicionar en base de datos
        String id = cmpId.getText();
        String name = cmpName.getText();
        String purchaseValue = cmpPurchaseValue.getText();
        String saleValue = cmpSaleValue.getText();
        int quantity = (int)spinQuantity.getValue();
        
        try {
            
            prepStat = (Statement) cnx.con.createStatement(); 
            
            sql = "UPDATE hproducts SET "
                    + "name = '"+name+"', "
                    + "purchaseValue = '"+purchaseValue+"', "
                    + "saleValue = '"+saleValue+"', "
                    + "quantity = '"+quantity+"' "
                    + "WHERE id = "+id+"";
            
            System.out.println(sql);
            
            prepStat.executeUpdate(sql);
            
            producto = new Product(name, 0, Double.parseDouble(purchaseValue), "");
            Conexion.actualizarProductos(producto);
            
            JOptionPane.showMessageDialog(this, "Product updated in database", "DataBase", 1);
            cnx.con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error trying to update the product to database: "+e, "Error", 0);
            System.out.println(e.toString());
        }
    }
    
    //Funcion para eliminar de base de datos el registro seleccionado
    public void EliminarDatosTabla(){
        
        Statement prepStat = null;
        Conexion cnx = new Conexion();
        String sql = "";
        
        //Variables para adicionar en base de datos
        String id = cmpId.getText();
        
        try {
            
            prepStat = (Statement) cnx.con.createStatement(); 
            
            sql = "DELETE FROM products WHERE id = '"+id+"'";
            
            //System.out.println(sql);
            
            prepStat.executeUpdate(sql);
            
            JOptionPane.showMessageDialog(this, "Product has been deleted from database", "DataBase", 1);
            
            cnx.con.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error trying to delete the product from database: "+e, "Error", 0);
            System.out.println(e.toString());
        }
    }
    
    public void limpiarDatos(){
        
        //Limpia campos del area de registro
        int cero = 0;
        cmpId.setText("");
        cmpName.setText("");
        cmpPurchaseValue.setText("");
        cmpSaleValue.setText("");
        spinQuantity.setValue(0);
    }
    
    public void crearComboboxCategoriaPpal(){
        
        Conexion cn = new Conexion();
        Statement st;
        ResultSet rs;
        ArrayList<String> tags = new ArrayList<>();
        boolean primerTag =  true;
        String  tag;
            try {
                st = (Statement) cn.con.createStatement();
                rs = st.executeQuery("select * from categories");
                while (rs.next()) {
                    tag = rs.getString("tag1");
                    primerTag = true;
                    
                    for (int i = 0; i < tags.size(); i++) {
                        if(tags.get(i).equalsIgnoreCase(tag))
                        {
                            primerTag = false;
                        }
                    }
                    
                    if(primerTag)
                    {
                        if(!tag.isEmpty())
                             tags.add(tag);
                    }
                    
                }
                
                for(int i = 0; i < tags.size(); i++) {
                    boxCategory.addItem(tags.get(i));
                }
                cn.con.close();
            } catch (Exception e) {
                 JOptionPane.showMessageDialog(null, "An error has occurred trying to connect to database"+e);
            }
            
    }
    
    public void crearComboboxCategoriaSub(String categoriaPpal){
        
        Conexion cn = new Conexion();
        Statement st;
        ResultSet rs;
        ArrayList<String> tags = new ArrayList<>();
        boolean primerTag2 =  true;
        boolean primerTag3 =  true;
        boolean primerTag4 =  true;
        String  tag2;
        String  tag3;
        String  tag4;
        boxSubCategory.removeAllItems();
        boxSubCategory.addItem("----");
            try {
                st = (Statement) cn.con.createStatement();
                rs = st.executeQuery("select * from categories where tag1 = '"+categoriaPpal+"'");
                while (rs.next()) {
                    tag2 = rs.getString("tag2");
                    tag3 = rs.getString("tag3");
                    tag4 = rs.getString("tag4");
                    primerTag2 = true;
                    primerTag3 = true;
                    primerTag4 = true;
                    
                    for (int i = 0; i < tags.size(); i++) {
                        if(tags.get(i).equalsIgnoreCase(tag2))
                        {
                            primerTag2 = false;
                        }
                        
                        if(tags.get(i).equalsIgnoreCase(tag3))
                        {
                            primerTag3 = false;
                        }
                        
                        if(tags.get(i).equalsIgnoreCase(tag4))
                        {
                            primerTag4 = false;
                        }
                    }
                    
                    if(primerTag2)
                    {
                        if(!tag2.isEmpty())
                             tags.add(tag2);
                    }
                    
                    if(primerTag3)
                    {
                        if(!tag3.isEmpty())
                             tags.add(tag3);
                    }
                    
                    if(primerTag4)
                    {
                        if(!tag4.isEmpty())
                             tags.add(tag4);
                    }
                    
                }
                
                for(int i = 0; i < tags.size(); i++) {
                   boxSubCategory.addItem(tags.get(i));
                }
                cn.con.close();
            } catch (Exception e) {
                 JOptionPane.showMessageDialog(null, "An error has occurred trying to connect to database"+e);
            }
            
    }
    
    public void filtrarTablaCategoria()
    {
        
        tablaModelo = new DefaultTableModel()
        {
         public Class<?> getColumnClass(int column)
        {
         switch(column)
         {
            case 9:
                return Boolean.class;

          default:
            return String.class;
        }
      }
    };
        Statement st;
        ResultSet rs;
        Conexion cnx = new Conexion();
        Connection con;
        String sql = "";
        String where = "";
        double valorTotal = 0.0;
        double valorTotalP = 0.0;
        String totalStr;
        String totalStrP;
        
        ArrayList<Product> productos = new ArrayList<>();
        
       // productos = Conexion.llenarTablaProductos();
        try {
            
            int cantCol;
            
            tablaProducts.setModel(tablaModelo);

            //Asigna rotulos a la tabla
            tablaModelo.addColumn("Product");
            tablaModelo.addColumn("Quantity");
            tablaModelo.addColumn("SaleValue");
            tablaModelo.addColumn("PurchaseValue");
            tablaModelo.addColumn("SaleTotal");
            tablaModelo.addColumn("PurchaseTotal");
            tablaModelo.addColumn("Profits");
            tablaModelo.addColumn("%Profitability");
            tablaModelo.addColumn("Date");
            tablaModelo.addColumn("Select");
            
         
            sql = "select * from hproducts " + where;
            
            Object O[]=null;
            int columnas = 0;
            st = (Statement) cnx.con.createStatement();
            rs = st.executeQuery(sql);

            //Where from filter fields

            while (rs.next()) {
                
                if(validarCategoriaProducto(rs.getString("name")) == 1)
                {
                    double totalPurchase = rs.getDouble("purchaseValue")*rs.getInt("quantity");
                    BigDecimal totalPurchaseDecimal = new BigDecimal(totalPurchase).setScale(2, RoundingMode.HALF_UP);
                    
                    double totalSale = rs.getDouble("saleValue")*rs.getInt("quantity");
                    BigDecimal totalSaleDecimal = new BigDecimal(totalSale).setScale(2, RoundingMode.HALF_UP);
                    
                    double profits = totalSale - totalPurchase;
                    BigDecimal profitsDecimal = new BigDecimal(profits).setScale(2, RoundingMode.HALF_UP);
                        
                    tablaModelo.addRow(O);
                    tablaModelo.setValueAt(rs.getString("name"), columnas, 0);
                    tablaModelo.setValueAt(rs.getInt("quantity"), columnas, 1);
                    tablaModelo.setValueAt(rs.getDouble("saleValue"), columnas, 2);
                    tablaModelo.setValueAt(rs.getDouble("purchaseValue"), columnas, 3);
                    tablaModelo.setValueAt(totalSaleDecimal, columnas, 4);
                    tablaModelo.setValueAt(totalPurchaseDecimal, columnas, 5);
                    tablaModelo.setValueAt(profitsDecimal, columnas, 6);
                    if(rs.getDouble("purchaseValue") != 0 && rs.getDouble("saleValue") != 0)
                    {
                        double profitability = (((rs.getDouble("saleValue")) - (rs.getDouble("purchaseValue")))/(rs.getDouble("saleValue")))*100;
                        BigDecimal profitabilityDecimal = new BigDecimal(profitability).setScale(2, RoundingMode.HALF_UP);
                        tablaModelo.setValueAt(profitabilityDecimal, columnas, 7);
                    }
                    else
                        tablaModelo.setValueAt(0.0, columnas, 7);
                    tablaModelo.setValueAt(rs.getString("uploadDate"), columnas, 8);

                    valorTotal = valorTotal + (rs.getDouble("saleValue")*rs.getInt("quantity"));
                    valorTotalP = valorTotalP + (rs.getDouble("purchaseValue")*rs.getInt("quantity"));
                    columnas++;
                }
            }

            
            cnx.con.close();
        } catch (Exception e) {
            System.out.println(e.toString());
        }
        
        //Se redondea el valor de los totales a 2 decimales
        BigDecimal bd = new BigDecimal(valorTotal).setScale(2, RoundingMode.HALF_UP);
        double val2 = bd.doubleValue();
        totalStr = ""+val2;
        
        BigDecimal bd2 = new BigDecimal(valorTotalP).setScale(2, RoundingMode.HALF_UP);
        double val1 = bd2.doubleValue();
        totalStrP = ""+val1;
        
        double totalCal = val2 - val1;
        BigDecimal total = new BigDecimal(totalCal).setScale(2, RoundingMode.HALF_UP);
        double total1 = total.doubleValue();
        String totalSP = ""+total1;
      
        lblTotal.setText(totalSP);
                
        txtSaleValue.setText(totalStr);
        txtPurchaseValue.setText(totalStrP);
    }
    
    public int validarCategoriaProducto(String producto){
        Statement st;
        ResultSet rs;
        Conexion cnx = new Conexion();
        Connection con;
        String sql = "";
        String where = "";
        
        try {
            
            if(!boxCategory.getSelectedItem().toString().equalsIgnoreCase("----") && !boxSubCategory.getSelectedItem().toString().equalsIgnoreCase("----"))
                where = "where tag1 = '"+boxCategory.getSelectedItem().toString()+"' and (tag3 = '"+boxSubCategory.getSelectedItem().toString()+"')"+
                        "or (tag2 = '"+boxSubCategory.getSelectedItem().toString()+"')"+
                        "or (tag1 = '"+boxSubCategory.getSelectedItem().toString()+"')";
            else if(!boxCategory.getSelectedItem().toString().equalsIgnoreCase("----"))
                where = "where tag1 = '"+boxCategory.getSelectedItem().toString()+"'";
            else if(!boxSubCategory.getSelectedItem().toString().equalsIgnoreCase("----"))
                where = "where tag3 = '"+boxSubCategory.getSelectedItem().toString()+"'";
            
            if(boxCategory.getSelectedItem().toString().equalsIgnoreCase("----"))
                where = "";
            
            sql = "select * from categories " + where;
            Object O[]=null;
            int columnas = 0;
            st = (Statement) cnx.con.createStatement();
            rs = st.executeQuery(sql);
            
            while(rs.next())
            {
                if(rs.getString("product").equalsIgnoreCase(producto))
                {
                    cnx.con.close();
                    return 1;
                }
            }
            cnx.con.close();
            return 0;
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "An error has occurred trying to connect to database"+ex);
            return 0;
        }
    }
    
    public String ObtenerCategoriaPpalDeProducto(String producto){
        Statement st;
        ResultSet rs;
        Conexion cnx = new Conexion();
        Connection con;
        String sql = "";
        String where = "";
        String categoria = "";
        
        try {
            
            where = "where product = '"+producto+"'";
            
            sql = "select * from categories " + where;
            Object O[]=null;
            int columnas = 0;
            st = (Statement) cnx.con.createStatement();
            rs = st.executeQuery(sql);
            
            while(rs.next())
            {
                    categoria = rs.getString("tag1");
                    cnx.con.close();
                    return categoria;
            }
            cnx.con.close();
            return "None";
        }catch(Exception ex){
            JOptionPane.showMessageDialog(null, "An error has occurred trying to connect to database"+ex);
            return "None";
        }
    }
    
    public ArrayList<Table> filtrarDatos()
    {
        
        Table table;
        ArrayList<Table> listaDtsc = new ArrayList<>();
        String product;
        int quantity;
        double saleValue;
        double purchaseValue;
        double saleTotal;
        double purchaseTotal;
        double profits;
        double valorPrecioCosto;
        String date;
        Double valor1 = 0.0;
        String dateTable = "";
        
        for(int j = 0; j < tablaProducts.getRowCount(); j++){
            

            product = tablaProducts.getValueAt(j, 0).toString();
            quantity = Integer.parseInt(tablaProducts.getValueAt(j, 1).toString());
            saleValue = Double.parseDouble(tablaProducts.getValueAt(j, 2).toString());
            purchaseValue = Double.parseDouble(tablaProducts.getValueAt(j, 3).toString());
            saleTotal = Double.parseDouble(tablaProducts.getValueAt(j, 4).toString());
            purchaseTotal = Double.parseDouble(tablaProducts.getValueAt(j, 5).toString());
            profits = Double.parseDouble(tablaProducts.getValueAt(j, 6).toString());
            valorPrecioCosto = Double.parseDouble(tablaProducts.getValueAt(j, 7).toString());
            date = tablaProducts.getValueAt(j, 8).toString();
            boolean primerDato = true;

            if(tablaProducts.getValueAt(j, 9) != null )
           {
                for (int i = 0; i < listaDtsc.size(); i++) {
                    if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Category"))
                    {
                        
                       // String semana = Conexion.obtenerSemanaFecha(date);
                      //  String semanaTable = calcularSemana(listaDtsc.get(i).getDate());
                        //dateTable = semana;
                        dateTable = ObtenerCategoriaPpalDeProducto(product);
                        if(dateTable.equalsIgnoreCase(listaDtsc.get(i).getDate()))
                        {
                            listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                            listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                            listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                            listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                            listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                            listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                            listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                            primerDato = false;
                        }
                    }
                    else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Weeks"))
                    {
                        
                       // String semana = Conexion.obtenerSemanaFecha(date);
                      //  String semanaTable = calcularSemana(listaDtsc.get(i).getDate());
                        //dateTable = semana;
                        dateTable = date;
                        if(dateTable.equalsIgnoreCase(listaDtsc.get(i).getDate()))
                        {
                            listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                            listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                            listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                            listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                            listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                            listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                            listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                            primerDato = false;
                        }
                    }
                    else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Months"))
                    {
                        
                        String mes = calcularMes(date);
                      //  String mesTable = calcularMes(listaDtsc.get(i).getDate());
                        
                        dateTable = mes;
                        if(mes.equalsIgnoreCase(listaDtsc.get(i).getDate()))
                        {
                            listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                            listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                            listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                            listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                            listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                            listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                            listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                            primerDato = false;
                        }
                    }
                    else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Years"))
                    {
                        
                        String anio = calcularAnio(date);
                      //  String anioTable = calcularAnio(listaDtsc.get(i).getDate());
                        
                        dateTable = anio;
                        if(anio.equalsIgnoreCase(listaDtsc.get(i).getDate()))
                        {
                            listaDtsc.get(i).setQuantity(listaDtsc.get(i).getQuantity()+quantity);
                            listaDtsc.get(i).setSaleValue(listaDtsc.get(i).getSaleValue()+saleValue);
                            listaDtsc.get(i).setPurchaseValue(listaDtsc.get(i).getPurchaseValue()+purchaseValue);
                            listaDtsc.get(i).setSaleTotal(listaDtsc.get(i).getSaleTotal()+saleTotal);
                            listaDtsc.get(i).setPurchaseTotal(listaDtsc.get(i).getPurchaseTotal()+purchaseTotal);
                            listaDtsc.get(i).setProfits(listaDtsc.get(i).getProfits()+profits);
                            listaDtsc.get(i).setValorPrecioCosto(listaDtsc.get(i).getValorPrecioCosto()+valorPrecioCosto);
                            primerDato = false;
                        }
                    }
                } 

                if(primerDato){
                    if(listaDtsc.size() == 0)
                    {
                        if(boxValor2.getSelectedItem().toString().equalsIgnoreCase("Category"))
                             dateTable = ObtenerCategoriaPpalDeProducto(product);
                        else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Weeks"))
                            dateTable = date;
                        else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Months"))
                            dateTable = calcularMes(date);
                        else if(boxGroup.getSelectedItem().toString().equalsIgnoreCase("Years"))
                            dateTable = calcularAnio(date);
                    }
                        
                    table = new Table(product, quantity, saleValue, purchaseValue, saleTotal, purchaseTotal, profits, valorPrecioCosto, dateTable);
                    listaDtsc.add(table);
                }


           }
                     
         }
        
        return listaDtsc;
    }
    
    public String calcularSemana(String fecha){
        
        String semana = "";
        String splitFecha[];
        
        splitFecha = fecha.split("/");
        
        if(Integer.parseInt(splitFecha[0]) <= 7)
        {
            semana = "W1-"+splitFecha[1];
        }
        else if(Integer.parseInt(splitFecha[0]) > 7 && Integer.parseInt(splitFecha[0]) <= 14)
        {
            semana = "W2-"+splitFecha[1];
        }
        else if(Integer.parseInt(splitFecha[0]) > 14 && Integer.parseInt(splitFecha[0]) <= 21)
        {
            semana = "W3-"+splitFecha[1];
        }
        else if(Integer.parseInt(splitFecha[0]) > 21)
        {
            semana = "W4-"+splitFecha[1];
        }
        
        return semana;
    }
    
    public String calcularMes(String fecha){
        
        String mes = "";
        String splitFecha[];
        
        splitFecha = fecha.split("/");
        
        mes = "M"+splitFecha[1]+"-"+splitFecha[2];
        
        return mes;
    }
    
    public String calcularAnio(String fecha){
        
        String anio = "";
        String splitFecha[];
        
        splitFecha = fecha.split("/");
        
        anio = splitFecha[2];
        
        return anio;
    }
    
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> ComboBoxGraphics;
    private javax.swing.JComboBox<String> boxCategory;
    private javax.swing.JComboBox<String> boxGroup;
    private javax.swing.JComboBox<String> boxSubCategory;
    private javax.swing.JComboBox<String> boxValor1;
    private javax.swing.JComboBox<String> boxValor11;
    private javax.swing.JComboBox<String> boxValor2;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JButton btnFiltroCategoria;
    private javax.swing.JButton btnLimpiarCampos;
    private javax.swing.JButton btnLimpiarCampos1;
    private javax.swing.JToggleButton btnRegresar;
    private javax.swing.JButton btnSelectAll;
    private javax.swing.JButton btnUnselectAll;
    private javax.swing.JButton btnVerOrden;
    private javax.swing.JCheckBox checkAlineacion;
    private javax.swing.JTextField cmpFromDate;
    private javax.swing.JTextField cmpId;
    private javax.swing.JTextField cmpName;
    private javax.swing.JTextField cmpPurchaseValue;
    private javax.swing.JTextField cmpSaleValue;
    private javax.swing.JTextField cmpToDate;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JSpinner spinQuantity;
    private javax.swing.JTable tablaProducts;
    private javax.swing.JTextField txtExpense;
    private javax.swing.JTextField txtPurchaseValue;
    private javax.swing.JTextField txtSaleValue;
    private javax.swing.JTextField txtSearchProduct;
    // End of variables declaration//GEN-END:variables
}
